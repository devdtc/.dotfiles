
;; package manager setup
(require 'package)

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))


;; misc configs

(fset 'yes-or-no-p 'y-or-n-p) ;; prompts accept y/n instead of yes/no
(menu-bar-mode -1)

(setq column-number-mode t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)
(setq fill-column 120) ;; M-q line wrapping column width
(setq-default electric-indent-inhibit t)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(use-package free-keys
  :ensure t)

;; org-mode

(use-package org
  :ensure org-plus-contrib
  :config
    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are DONE, to TODO otherwise."
        (let (org-log-done org-log-states) ; turn off logging
          (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
    (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "M-n") 'org-time-stamp-inactive)
    (setq org-log-done 'time))


;; evil

(use-package undo-tree
  :ensure t
  :init
    (global-undo-tree-mode))

(use-package evil
  :ensure t
  :init
    (setq evil-want-C-i-jump nil) ;; fixes TAB in org-mode
    (setq evil-want-C-u-scroll t) ;; fixes C-u scrolling
    (setq evil-shift-width (symbol-value 'tab-width))
    (setq evil-undo-system 'undo-tree)
  :config
    (evil-mode t)
    (progn
      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
      (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
      (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
      (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right))
    (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop))

(use-package evil-commentary
  :ensure t
  :config
    (evil-commentary-mode))

(use-package org-evil
  :ensure t)

(use-package display-line-numbers
  :config
    (global-display-line-numbers-mode)
    (setq display-line-numbers-type 'visual)
    (setq display-line-numbers-grow-only t))


;; language specific

(use-package lua-mode
  :ensure t
  :config
    (setq lua-indent-level
      (symbol-value 'tab-width))

    (defun newline-and-indent-same-level ()
      "Insert a newline, then indent to the same column as the current line."
      (interactive)
      (let ((col (save-excursion
                   (back-to-indentation)
                   (current-column))))
        (newline)
        (indent-to-column col)))
    (add-hook 'lua-mode-hook (lambda ()
      (electric-indent-mode -1) ;; disable stupid tab functionality
      (local-set-key "\r" 'newline-and-indent-same-level))))

(use-package haskell-mode
  :ensure t)

(use-package fsharp-mode
  :defer t
  :ensure t
  :config
    (setq-default fsharp-indent-offset 2))

(use-package reason-mode
  :ensure t)

(use-package rust-mode
  :ensure t)


;; misc packages

(use-package helm
  :ensure t)

; (use-package indent-guide
;   :ensure t
;   :config
;     (indent-guide-global-mode)
;     (setq indent-guide-char "â”‚"))

(use-package highlight-indent-guides
  :ensure t
  :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character)
    (set-face-background 'highlight-indent-guides-odd-face "color-234")
    (set-face-background 'highlight-indent-guides-even-face "color-234")
    (set-face-foreground 'highlight-indent-guides-character-face "color-234"))


;; theme

(use-package nord-theme
  :ensure t
  :config
    (load-theme 'nord t))

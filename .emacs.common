
;; package manager setup

(require 'package)

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))


;; misc configs

(fset 'yes-or-no-p 'y-or-n-p) ;; prompts accept y/n instead of yes/no
(menu-bar-mode -1)

(setq column-number-mode t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)


;; org-mode

(use-package cl
  :ensure t)

(use-package org
  :ensure org-plus-contrib
  :config
    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are DONE, to TODO otherwise."
        (let (org-log-done org-log-states) ; turn off logging
          (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
    (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (setq org-log-done 'time))

(use-package org-drill
  :after org)


;; evil

(use-package evil
  :ensure t
  :init
    (setq evil-want-C-i-jump nil) ;; fixes TAB in org-mode
    (setq evil-want-C-u-scroll t) ;; fixes C-u scrolling
  :config
    (evil-mode t)
    (progn
      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
      (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
      (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
      (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)))

(use-package evil-commentary
  :ensure t
  :config
    (evil-commentary-mode))

(use-package org-evil
  :ensure t)

(use-package linum-relative
  :ensure t
  :config
    (linum-mode)
    (linum-relative-global-mode)
    (setq linum-relative-current-symbol "")
    (setq linum-relative-format "%4s\u2502"))


;; language specific

(use-package lua-mode
  :ensure t
  :config
    (setq lua-indent-level
      (symbol-value 'tab-width))

    (defun newline-and-indent-same-level ()
      "Insert a newline, then indent to the same column as the current line."
      (interactive)
      (let ((col (save-excursion
                   (back-to-indentation)
                   (current-column))))
        (newline)
        (indent-to-column col)))
    (add-hook 'lua-mode-hook (lambda ()
      (electric-indent-mode -1) ;; disable stupid tab functionality
      (local-set-key "\r" 'newline-and-indent-same-level))))


;; misc packages

(use-package helm
  :ensure t)

